defmodule RLPTest do
  use ExUnit.Case, async: true
  doctest RLP

  test "encode longer value" do
    val = [
      <<206, 136, 59, 245, 199, 91, 183, 59, 212, 47, 132, 68, 225, 173, 45>>,
      <<213, 173, 5, 103, 108, 29, 179, 253, 220, 198, 236, 211, 204, 137, 69, 207,
        105, 54, 252, 15, 62, 73, 190, 96, 121, 176, 226, 22, 159, 221, 167, 5>>,
      <<0, 105, 204, 8, 221, 100, 13, 211, 103, 125, 13, 148, 5, 138, 118, 203, 52,
        28, 225, 76, 168, 115, 60, 75, 8, 24, 190, 75, 89, 153, 8, 247>>,
      <<206, 136, 53, 88, 115, 24, 249, 208, 219, 135, 132, 101, 7, 2, 163>>,
      <<192>>,
      <<203, 5, 143, 200, 168, 2, 177, 21, 191, 23, 209, 232, 105, 187, 24, 47, 106,
        98, 12, 249, 180, 105, 94, 230, 238, 9, 196, 228, 76, 46, 179, 192>>,
      <<192>>,
      <<206, 136, 53, 73, 237, 71, 180, 157, 226, 38, 132, 242, 53, 232, 252>>,
      <<192>>, <<192>>,
      <<206, 136, 61, 255, 1, 240, 93, 21, 121, 152, 132, 201, 95, 49, 73>>,
      <<206, 136, 55, 200, 137, 142, 105, 58, 238, 38, 132, 221, 215, 51, 22>>,
      <<206, 136, 51, 197, 138, 33, 79, 137, 123, 132, 132, 224, 191, 48, 179>>,
      <<92, 134, 127, 22, 133, 2, 74, 129, 136, 225, 18, 99, 168, 76, 150, 0, 182,
        132, 64, 148, 198, 123, 138, 215, 63, 153, 125, 41, 182, 71, 8, 205>>,
      <<206, 136, 48, 180, 76, 181, 133, 91, 160, 252, 132, 227, 218, 177, 37>>,
      <<192>>, <<192>>]

    assert RLP.encode(val) == <<249, 1, 0, 143, 206, 136, 59, 245, 199, 91, 183, 59, 212, 47, 132, 68, 225, 173, 45, 160, 213, 173, 5, 103, 108, 29, 179, 253, 220, 198, 236, 211, 204, 137, 69, 207, 105, 54, 252, 15, 62, 73, 190, 96, 121, 176, 226, 22, 159, 221, 167, 5, 160, 0, 105, 204, 8, 221, 100, 13, 211, 103, 125, 13, 148, 5, 138, 118, 203, 52, 28, 225, 76, 168, 115, 60, 75, 8, 24, 190, 75, 89, 153, 8, 247, 143, 206, 136, 53, 88, 115, 24, 249, 208, 219, 135, 132, 101, 7, 2, 163, 129, 192, 160, 203, 5, 143, 200, 168, 2, 177, 21, 191, 23, 209, 232, 105, 187, 24, 47, 106, 98, 12, 249, 180, 105, 94, 230, 238, 9, 196, 228, 76, 46, 179, 192, 129, 192, 143, 206, 136, 53, 73, 237, 71, 180, 157, 226, 38, 132, 242, 53, 232, 252, 129, 192, 129, 192, 143, 206, 136, 61, 255, 1, 240, 93, 21, 121, 152, 132, 201, 95, 49, 73, 143, 206, 136, 55, 200, 137, 142, 105, 58, 238, 38, 132, 221, 215, 51, 22, 143, 206, 136, 51, 197, 138, 33, 79, 137, 123, 132, 132, 224, 191, 48, 179, 160, 92, 134, 127, 22, 133, 2, 74, 129, 136, 225, 18, 99, 168, 76, 150, 0, 182, 132, 64, 148, 198, 123, 138, 215, 63, 153, 125, 41, 182, 71, 8, 205, 143, 206, 136, 48, 180, 76, 181, 133, 91, 160, 252, 132, 227, 218, 177, 37, 129, 192, 129, 192>>
  end

  test "encode 55 value list" do
    x = [(for i <- 1..55, into: <<>>, do: <<i>>), <<>>]

    assert x == (RLP.encode(x) |> RLP.decode())
  end

  test "encode 54 value list" do
    x = [(for i <- 1..54, into: <<>>, do: <<i>>), <<>>]

    assert x == (RLP.encode(x) |> RLP.decode())
  end

  test "encode 53 value list" do
    x = [(for i <- 1..53, into: <<>>, do: <<i>>), <<>>]

    assert x == (RLP.encode(x) |> RLP.decode())
  end

  test "another strange case" do
    assert RLP.decode(
      << 248, 204, 184, 100, 49, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
         17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
         36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
         55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
         74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
         93, 94, 95, 96, 97, 98, 99, 100, 184, 100, 2, 4, 6, 8, 10, 12, 14, 16, 18,
         20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
         58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
         96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
         128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
         158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
         188, 190, 192, 194, 196, 198, 200>>) == [
      << 49, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
         17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
         36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
         55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
         74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
         93, 94, 95, 96, 97, 98, 99, 100>>,
      << 2, 4, 6, 8, 10, 12, 14, 16, 18,
         20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
         58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
         96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
         128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
         158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
         188, 190, 192, 194, 196, 198, 200>>]
  end

  test "encode and decode" do
    x = 15_000_000_000_000_000_000_000_000_000_000_000

    assert x |> RLP.encode |> RLP.decode |> :binary.decode_unsigned == x
  end

  test "for a longer array with more elements" do
    a = [
      [<<1::256>>, <<2::256>>, <<3::160>>, <<4::256>>, <<5::256>>, <<6::256>>, <<>>, <<5>>, <<1>>, <<5>>, <<3>>, <<6>>, "Hi mom", <<7::256>>, <<8::64>>],
      [[<<5>>, <<6>>, <<7>>, <<1::160>>, <<8>>, "hi", <<27>>, <<9>>, <<10>>]],
      [[<<11::256>>, <<12::256>>, <<13::160>>, <<14::256>>, <<15::256>>, <<16::256>>, <<>>, <<5>>, <<1>>, <<5>>, <<3>>, <<6>>, "Hi mom", <<17::256>>, <<18::64>>]]
    ]

    assert a |> RLP.encode |> RLP.decode == a
  end

  test "for a longer array with a single element" do
    a = [
      [<<1::512>>]
    ]

    assert a |> RLP.encode |> RLP.decode == a
  end
end
